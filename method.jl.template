using NLPModels, LinearAlgebra
%%PKGS%%

function %%METHODNAME%%(
  nlp::AbstractNLPModel;
  σ::Real = 0.5,
  η::Real = 1e-4,
  atol::Real = 1e-5,
  rtol::Real = 1e-5,
  max_eval::Int = 5_000,
  max_time::Real = 30.0,
  verbose::Int = 0,
)
  t₀ = time()
  x = copy(nlp.meta.x0)
  xt = copy(x)

  fx = obj(nlp, x)
  gx = grad(nlp, x)
  slope = dot(gx, gx)

  ϵ = atol + rtol * √slope

  iter = 0
  Δt = time() - t₀
  solved = √slope < ϵ
  tired = neval_grad(nlp) > max_eval || Δt > max_time

  %%INITIAL%%
  %%LOG%%

  while !(solved || tired)
    t = 1.0
    @. xt = x - t * gx
    ft = obj(nlp, xt)
    while !(ft ≤ fx - η * t * slope)
      t = t * σ
      @. xt = x - t * gx
      ft = obj(nlp, xt)
      if t < 1e-12
        Δt = time() - t₀
        return iter, x, fx, :failure, Δt
      end
    end
    x .= xt
    fx = ft
    grad!(nlp, x, gx)
    slope = dot(gx, gx)

    iter += 1
    Δt = time() - t₀
    solved = √slope < ϵ
    tired = neval_grad(nlp) > max_eval || Δt > max_time

    %%LOG%%
  end
  status = if solved
    :success
  elseif Δt > max_time
    :max_time
  else
    :max_eval
  end

  return iter, x, fx, status, Δt
end